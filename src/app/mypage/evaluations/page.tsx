'use client';

import React from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { MapPin, Star, ExternalLink, Calendar } from 'lucide-react';

type EvalStatus = 'all' | 'in_progress' | 'completed' | 'scheduled';

export default function MyEvaluationsPage() {
  const [isBannerVisible, setIsBannerVisible] = React.useState(true);
  const [currentLanguage, setCurrentLanguage] = React.useState<'ko' | 'en' | 'ja' | 'zh'>('ko');
  const [isLoggedIn, setIsLoggedIn] = React.useState(false);
  const [userCountry, setUserCountry] = React.useState('ÎåÄÌïúÎØºÍµ≠');

  const [activeTab, setActiveTab] = React.useState<EvalStatus>('all');

  React.useEffect(() => {
    const getUserCountry = async () => {
      try {
        const response = await fetch('https://ipapi.co/json/');
        const data = await response.json();
        setUserCountry(data.country_name || 'ÎåÄÌïúÎØºÍµ≠');
      } catch (error) {
        setUserCountry('ÎåÄÌïúÎØºÍµ≠');
      }
    };
    getUserCountry();
  }, []);

  const getText = (key: string) => {
    const texts = {
      ko: {
        pageTitle: 'ÌèâÍ∞Ä Í≥µÍ∏âÏÇ¨',
        tabAll: 'Ï†ÑÏ≤¥',
        tabInProgress: 'ÌèâÍ∞Ä ÏßÑÌñâ',
        tabCompleted: 'ÌèâÍ∞Ä ÏôÑÎ£å',
        tabScheduled: 'ÌèâÍ∞Ä ÏòàÏ†ï',
        evaluate: 'ÌèâÍ∞ÄÌïòÍ∏∞',
        noData: 'ÌëúÏãúÌï† Í≥µÍ∏âÏÇ¨Í∞Ä ÏóÜÏäµÎãàÎã§.',
        period: 'ÌèâÍ∞Ä Í∏∞Í∞Ñ',
      },
      en: {
        pageTitle: 'Evaluated Suppliers',
        tabAll: 'All',
        tabInProgress: 'In Progress',
        tabCompleted: 'Completed',
        tabScheduled: 'Scheduled',
        evaluate: 'Evaluate',
        noData: 'No suppliers to display.',
        period: 'Evaluation Period',
      },
      ja: {
        pageTitle: 'Ë©ï‰æ°„Çµ„Éó„É©„Ç§„É§„Éº',
        tabAll: 'ÂÖ®‰Ωì',
        tabInProgress: 'Ë©ï‰æ°ÈÄ≤Ë°å',
        tabCompleted: 'Ë©ï‰æ°ÂÆå‰∫Ü',
        tabScheduled: 'Ë©ï‰æ°‰∫àÂÆö',
        evaluate: 'Ë©ï‰æ°„Åô„Çã',
        noData: 'Ë°®Á§∫„Åô„Çã„Çµ„Éó„É©„Ç§„É§„Éº„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ',
        period: 'Ë©ï‰æ°ÊúüÈñì',
      },
      zh: {
        pageTitle: 'ËØÑ‰ª∑‰æõÂ∫îÂïÜ',
        tabAll: 'ÂÖ®ÈÉ®',
        tabInProgress: 'ËøõË°å‰∏≠',
        tabCompleted: 'Â∑≤ÂÆåÊàê',
        tabScheduled: 'È¢ÑÂÆö',
        evaluate: 'ÂéªËØÑ‰ª∑',
        noData: 'Ê≤°ÊúâÂèØÊòæÁ§∫ÁöÑ‰æõÂ∫îÂïÜ„ÄÇ',
        period: 'ËØÑ‰ª∑ÊúüÈó¥',
      },
    } as const;
    return (texts as any)[currentLanguage]?.[key] ?? (texts as any).ko[key];
  };

  const [suppliers, setSuppliers] = React.useState(
    [
      {
        id: 1,
        name: '(Ï£º)Í∏ÄÎ°úÎ≤åÌÖåÌÅ¨',
        categoryDepth3: 'ÏãúÏä§ÌÖú Í∞úÎ∞ú',
        location: 'ÏÑúÏö∏ÌäπÎ≥ÑÏãú Í∞ïÎÇ®Íµ¨',
        description: 'Í∏ÄÎ°úÎ≤å IT ÏÜîÎ£®ÏÖò Ï†ÑÎ¨∏ Í∏∞ÏóÖÏúºÎ°ú Îã§ÏñëÌïú ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ Í∞úÎ∞ú ÏÑúÎπÑÏä§Î•º Ï†úÍ≥µÌï©ÎãàÎã§.',
        rating: 4.7,
        tags: ['ÏÜåÌîÑÌä∏Ïõ®Ïñ¥', 'ITÏª®ÏÑ§ÌåÖ'],
        website: 'https://www.globaltech.co.kr',
        status: 'in_progress' as EvalStatus,
        startDate: '2025-01-10',
        endDate: '2025-01-20',
      },
      {
        id: 2,
        name: 'ÌîÑÎ¶¨ÎØ∏ÏóÑ Ï†úÏ°∞',
        categoryDepth3: 'Ï†ïÎ∞Ä Î∂ÄÌíà Ï†úÏ°∞',
        location: 'Í≤ΩÍ∏∞ÎèÑ ÏàòÏõêÏãú',
        description: 'Ï†ïÎ∞Ä Î∂ÄÌíà Ï†úÏ°∞ Ï†ÑÎ¨∏ ÏóÖÏ≤¥Î°ú ÏµúÍ≥† ÌíàÏßàÏùò Ï†úÌíàÏùÑ Í≥µÍ∏âÌï©ÎãàÎã§.',
        rating: 4.9,
        tags: ['Ï†ïÎ∞ÄÎ∂ÄÌíà', 'ÌíàÏßàÍ¥ÄÎ¶¨'],
        website: 'https://www.premiummfg.co.kr',
        status: 'completed' as EvalStatus,
        startDate: '2024-12-01',
        endDate: '2024-12-10',
      },
      {
        id: 3,
        name: 'ÎßàÏºÄÌåÖÏóëÏÖÄÎü∞Ïä§',
        categoryDepth3: 'ÎîîÏßÄÌÑ∏ ÎßàÏºÄÌåÖ',
        location: 'ÏÑúÏö∏ÌäπÎ≥ÑÏãú ÏÑúÏ¥àÍµ¨',
        description: 'ÎîîÏßÄÌÑ∏ ÎßàÏºÄÌåÖ Ï†ÑÎ¨∏ ÏóêÏù¥Ï†ÑÏãúÎ°ú Î∏åÎûúÎìú ÏÑ±Ïû•ÏùÑ Ïù¥ÎÅåÏñ¥Í∞ëÎãàÎã§.',
        rating: 4.6,
        tags: ['Î∏åÎûúÎî©', 'SNSÎßàÏºÄÌåÖ'],
        status: 'scheduled' as EvalStatus,
        startDate: '2025-02-01',
        endDate: '2025-02-15',
      },
      {
        id: 4,
        name: 'Ïä§ÎßàÌä∏Î°úÏßÄÏä§Ìã±Ïä§',
        categoryDepth3: 'Ï¢ÖÌï© Î¨ºÎ•ò ÏÑúÎπÑÏä§',
        location: 'Ïù∏Ï≤úÍ¥ëÏó≠Ïãú Ïó∞ÏàòÍµ¨',
        description: 'Ïä§ÎßàÌä∏ Î¨ºÎ•ò ÏãúÏä§ÌÖúÏúºÎ°ú ÏµúÏ†ÅÌôîÎêú ÏÑúÎπÑÏä§Î•º Ï†úÍ≥µÌïòÎäî Ï†ÑÎ¨∏ Í∏∞ÏóÖÏûÖÎãàÎã§.',
        rating: 4.5,
        tags: ['Î¨ºÎ•ò', 'Î∞∞ÏÜ°'],
        status: 'in_progress' as EvalStatus,
        startDate: '2025-01-05',
        endDate: '2025-01-25',
      },
    ]
  );

  const filtered = React.useMemo(() => {
    if (activeTab === 'all') return suppliers;
    return suppliers.filter((s) => s.status === activeTab);
  }, [suppliers, activeTab]);

  const handleEvaluate = (id: number) => {
    console.log('Evaluate supplier:', id);
    // TODO: route to evaluation form or open a modal
  };

  return (
    <div className="min-h-screen bg-white flex flex-col">
      <Header
        isBannerVisible={isBannerVisible}
        setIsBannerVisible={setIsBannerVisible}
        currentLanguage={currentLanguage}
        setCurrentLanguage={setCurrentLanguage}
        isLoggedIn={isLoggedIn}
        setIsLoggedIn={setIsLoggedIn}
      />

      <main className="flex-1" style={{ paddingTop: isBannerVisible ? '112px' : '64px' }}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Page Title */}
          <div className="mb-6">
            <h1 className="text-3xl font-bold text-gray-900">{getText('pageTitle')}</h1>
          </div>

          {/* Tab Menu */}
          <div className="mb-6">
            {/* PC Tabs */}
            <div className="hidden md:block border-b border-gray-200">
              <nav className="-mb-px flex space-x-8">
                {[
                  { key: 'all', label: getText('tabAll') },
                  { key: 'in_progress', label: getText('tabInProgress') },
                  { key: 'completed', label: getText('tabCompleted') },
                  { key: 'scheduled', label: getText('tabScheduled') },
                ].map((tab) => (
                  <button
                    key={tab.key}
                    onClick={() => setActiveTab(tab.key as EvalStatus)}
                    className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                      activeTab === tab.key
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    {tab.label}
                  </button>
                ))}
              </nav>
            </div>
            {/* Mobile Select */}
            <div className="block md:hidden">
              <select
                value={activeTab}
                onChange={(e) => setActiveTab(e.target.value as EvalStatus)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
              >
                <option value="all">{getText('tabAll')}</option>
                <option value="in_progress">{getText('tabInProgress')}</option>
                <option value="completed">{getText('tabCompleted')}</option>
                <option value="scheduled">{getText('tabScheduled')}</option>
              </select>
            </div>
          </div>

          {/* List */}
          <div className="space-y-4">
            {filtered.length > 0 ? (
              filtered.map((s) => (
                <div key={s.id} className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                  <div className="flex items-start gap-4">
                    {/* Icon - PC Only */}
                    <div className="hidden md:flex w-16 h-16 bg-gray-200 rounded-lg items-center justify-center flex-shrink-0">
                      <div className="text-gray-400 text-2xl">üè¢</div>
                    </div>
                    {/* Info */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center gap-2 flex-1">
                          <h3 className="font-semibold text-gray-900 text-lg truncate">{s.name}</h3>
                          {s.website && (
                            <a href={s.website} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:text-blue-800" title="ÌôàÌéòÏù¥ÏßÄ Î∞©Î¨∏">
                              <ExternalLink className="h-4 w-4" />
                            </a>
                          )}
                        </div>
                        <div className="flex items-center gap-2 ml-4">
                          <div className="flex items-center text-yellow-500">
                            <Star className="h-4 w-4 fill-current" />
                            <span className="text-sm text-gray-600 ml-1">{s.rating}</span>
                          </div>
                        </div>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-2">
                        <div className="text-sm text-gray-600">{s.categoryDepth3}</div>
                        <div className="flex items-center text-sm text-gray-600">
                          <MapPin className="h-4 w-4 mr-2" />
                          {s.location}
                        </div>
                      </div>
                      {/* Evaluation Period */}
                      <div className="flex items-center text-sm text-gray-600 mb-2">
                        <Calendar className="h-4 w-4 mr-2" />
                        <span>{getText('period')}: {s.startDate} ~ {s.endDate}</span>
                      </div>
                      {/* Actions */}
                      <div className="mt-3 flex justify-end">
                        <button
                          onClick={() => handleEvaluate(s.id)}
                          disabled={s.status === 'completed' || s.status === 'scheduled'}
                          className={`px-4 py-2 text-sm rounded-lg transition-colors ${
                            s.status === 'completed' || s.status === 'scheduled'
                              ? 'bg-gray-300 text-white cursor-not-allowed'
                              : 'bg-blue-600 text-white hover:bg-blue-700'
                          }`}
                        >
                          {getText('evaluate')}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-12">
                <p className="text-gray-500">{getText('noData')}</p>
              </div>
            )}
          </div>
        </div>
      </main>

      <Footer currentLanguage={currentLanguage} userCountry={userCountry} />
    </div>
  );
}


